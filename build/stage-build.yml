parameters:
  applicationEnvironment: ''

jobs:
  - job: On_Windows # Build UWP and Android on a windows machine
    strategy:
      maxParallel: 3
      matrix:
        Android:
          ApplicationConfiguration: Release_Android
          ApplicationPlatform: Any CPU
          ArtifactName: $(AndroidArtifactName)
          ApplicationEnvironment: ${{ parameters.applicationEnvironment }}
        UWP:
          ApplicationConfiguration: Release_UWP
          ApplicationPlatform: Any CPU
          ArtifactName: $(UWPArtifactName)
          ApplicationEnvironment: ${{ parameters.applicationEnvironment }}
        Tests:
          ApplicationConfiguration: Release_Tests
          ApplicationPlatform: Any CPU
          ArtifactName: $(TestsArtifactName)
          ApplicationEnvironment: ${{ parameters.applicationEnvironment }}
    pool:
      name: $(windowsPoolName)

    variables:
    - group: ApplicationTemplate.Distribution.GooglePlay
    
    container: windows

    steps:
      - template: steps-build.yml

  - job: On_Mac # Build iOS on a mac
    strategy:
      maxParallel: 3
      matrix:
        iOS:
          ApplicationConfiguration: Release_iOS
          ApplicationPlatform: Any CPU
          ArtifactName: $(iOSArtifactName)    
          ApplicationEnvironment: ${{ parameters.applicationEnvironment }}   
    pool:
      name: $(macOSPoolName)
      demands:
        - Xamarin.iOS -equals $(XAMARIN_IOS_VERSION)
      
    variables:
    - name: SkipUnknownFrameworks
      value: true # Used by TargetFrameworks.Filtering package to build only what's possible on a mac for the multitargeted library
    - group: ApplicationTemplate.Distribution.AppStore

    steps:
    - task: UseDotNet@2
      displayName: 'Install .Net Core runtime 2.1.x'
      inputs:
        version: 2.1.x
        packageType: 'runtime'
        installationPath: '$(Agent.ToolsDirectory)/dotnet'
        
    - template: steps-build.yml

  # - job: On_Linux
  #   strategy:
  #     maxParallel: 1
  #     matrix:
  #       Wasm:
  #         ApplicationConfiguration: Release_WASM
  #         ApplicationPlatform: Any CPU
  #         ArtifactName: $(WASMArtifactName)
  #         ApplicationEnvironment: ${{ parameters.applicationEnvironment }}

  #   container: unoplatform/wasm-build:2.2

  #   pool:
  #     vmImage: 'ubuntu-18.04'

  #   variables:
  #     NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget
  #     SkipUnknowFrameworks: True

  #   steps:
  #     - template: steps-build-wasm.yml