trigger:
  branches:
    include:
      - master
      - release/*
      - feature/*

pr:
  branches:
    include:
      - master
      - release/*

resources:
  containers:
    - container: windows
      image: nventive/build-agent:vs16.6.0

variables:

  # Prerequisites - Variable groups
  # Make sure you have the following variable groups in your Azure pipeline library:
  # ApplicationTemplate.Distribution.GooglePlay
  #   AndroidApplicationId: This is the official application id of the app that should go on the store.
  #   AndroidSigningKeyAlias: This is the keystore alias.
  #   AndroidSigningKeyPass: This is the keystore keypass (secured).
  #   AndroidSigningStorePass: This is the keystore storepass (secured).
  # ApplicationTemplate.Distribution.AppStore
  #   AppleBundleId: The official bundle id of the app that should go on the store; the app will be resigned with this id.
  #   AppleCertificatePassword: The certificate password (secured).
  #   AppleTeamId: The developer account team id (secured).
  #   AppleTeamName: The developer account team name.

  # Prerequisites - Secured files
  # Make sure you have the following secured files in your Azure pipeline library.
  GooglePlayKeystore: com.nventive.applicationtemplate.jks # This is the official keystore used for Google Play.
  AppStoreProvisioningProfile: com.nventive.applicationtemplate.mobileprovision # This is the official provisioning profile for the AppStore.
  AppStoreCertificate: nventive.p12 # This is the official certificate for the AppStore.

  # Prerequisites - Service connections
  # Make sure you have the following service connections in your Azure pipeline library.
  GooglePlayServiceConnection: GooglePlay-nventive-ApplicationTemplate
  AppCenterServiceConnection: AppCenter-nventive-framework
  AppStoreServiceConnection: AppStore-nventive

  # AppCenter slugs
  AppCenterAndroidSlug: 'nventive-framework/Application-Template-1'
  AppCenteriOSSlug: 'nventive-framework/Application-Template'
  AppCenterUWPSlug: 'nventive-framework/Application-Template-2'
  AppCenterAndroidSlug_Production: 'nventive-framework/ApplicationTemplate-Production-1'
  AppCenteriOSSlug_Production: 'nventive-framework/ApplicationTemplate-Production'
  AppCenterUWPSlug_Production: 'nventive-framework/ApplicationTemplate-Production-2'

  # Azure subscription
  # AzureSubscriptionName:
  # AzureStorageAccountName:

  # Solution to build
  SolutionFileName: ApplicationTemplate.sln

  # Pool names
  windowsPoolName: 'windows 1809'
  macOSPoolName: 'Default'

  # Versions to use
  NUGET_VERSION: 5.4.0
  XAMARIN_IOS_VERSION: 13.16

  # Name of the folder where the artefacts will be placed. Variable used in build and release phases.
  # We make seperate folders so that releases can each download only the folder they need.
  AndroidArtifactName: Android
  iOSArtifactName: iOS
  UWPArtifactName: UWP
  WASMArtifactName: WASM
  TestsArtifactName: Tests

  # Path where packages (nuget or app packages) will be copied to.
  PackageOutputPath: $(Build.ArtifactStagingDirectory)

  # For Application.Building.Light optimizations
  IsLightBuild: $[eq(variables['Build.Reason'], 'PullRequest')]

  # For release conditions
  IsReleaseBranch: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))]

  # Only release when the build is not a Pull Request and it's using one of the proper release branches
  IsReleaseBuild: $[and(ne(variables['IsLightBuild'], 'true'), eq(variables['IsReleaseBranch'], 'true'))]

  # Android variables (hosted agent)
  # ANDROID_NDK_HOME: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  # ANDROID_NDK_PATH: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  # AndroidNdkDirectory: C:\Microsoft\AndroidNDK64\android-ndk-r16b

  # iOS variables (hosted agent) / See ios-build-select-version.yml if needed.
  # xCodeRoot: '/Applications/Xcode_11.3.app'
  # XamarinSDKVersion: 6_6_0

stages:
- stage: Build_Staging
  jobs:
  - template: build/stage-build.yml
    parameters:
      applicationEnvironment: Staging

- stage: Build_Production
  dependsOn: Build_Staging # Use dependsOn: [] if you want to run both builds in parallel.
  condition: and(succeeded(), eq(variables['IsReleaseBuild'], 'true'))
  jobs:
  - template: build/stage-build.yml
    parameters:
      applicationEnvironment: Production

- stage: AppCenter_Staging
  condition: and(succeeded(), eq(variables['IsReleaseBuild'], 'true'))
  dependsOn: Build_Staging

  jobs:
  - template: build/stage-release-appcenter.yml
    parameters:
      appCenterUWPSlug: $(AppCenterUWPSlug)
      appCenteriOSSlug: $(AppCenteriOSSlug)
      appCenterAndroidSlug: $(AppCenterAndroidSlug)
      deploymentEnvironment: 'Staging'

- stage: AppCenter_Production
  condition: and(succeeded(), eq(variables['IsReleaseBuild'], 'true'))
  dependsOn: Build_Production

  jobs:
  - template: build/stage-release-appcenter.yml
    parameters:
      appCenterUWPSlug: $(AppCenterUWPSlug_Production)
      appCenteriOSSlug: $(AppCenteriOSSlug_Production)
      appCenterAndroidSlug: $(AppCenterAndroidSlug_Production)
      deploymentEnvironment: 'Production'

# - stage: Azure
#   condition: and(succeeded(), eq(variables['IsReleaseBuild'], 'true'))
#   dependsOn: Build_Production

#   jobs:
#   - template: build/stage-release-wasm.yml

- stage: AppStore
  condition: and(succeeded(), eq(variables['IsReleaseBuild'], 'true'))
  dependsOn: Build_Production

  jobs:
  - template: build/stage-release-appstore.yml
    parameters:    
      deploymentEnvironment: 'Store'

- stage: GooglePlay
  condition: and(succeeded(), eq(variables['IsReleaseBuild'], 'true'))
  dependsOn: Build_Production

  jobs:
  - template: build/stage-release-googleplay.yml
    parameters:    
      deploymentEnvironment: 'Store'
